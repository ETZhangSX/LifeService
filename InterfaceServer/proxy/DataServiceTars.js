// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "DataService.tars" by Structure Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");

var _hasOwnProperty = Object.prototype.hasOwnProperty;

var LifeService = LifeService || {};
module.exports.LifeService = LifeService;

LifeService.UserInfo = function() {
    this.name = "";
    this.phone = "";
    this.gender = "";
    this.avatar_url = "";
    this.registration_time = "";
    this.group = 0;
    this._classname = "LifeService.UserInfo";
};
LifeService.UserInfo._classname = "LifeService.UserInfo";
LifeService.UserInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.UserInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.UserInfo._readFrom = function (is) {
    var tmp = new LifeService.UserInfo;
    tmp.name = is.readString(0, true, "");
    tmp.phone = is.readString(1, true, "");
    tmp.gender = is.readString(2, true, "");
    tmp.avatar_url = is.readString(3, true, "");
    tmp.registration_time = is.readString(4, true, "");
    tmp.group = is.readInt32(5, true, 0);
    return tmp;
};
LifeService.UserInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.name);
    os.writeString(1, this.phone);
    os.writeString(2, this.gender);
    os.writeString(3, this.avatar_url);
    os.writeString(4, this.registration_time);
    os.writeInt32(5, this.group);
};
LifeService.UserInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.UserInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.UserInfo.prototype.toObject = function() { 
    return {
        "name" : this.name,
        "phone" : this.phone,
        "gender" : this.gender,
        "avatar_url" : this.avatar_url,
        "registration_time" : this.registration_time,
        "group" : this.group
    };
};
LifeService.UserInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "phone") && (this.phone = json.phone);
    _hasOwnProperty.call(json, "gender") && (this.gender = json.gender);
    _hasOwnProperty.call(json, "avatar_url") && (this.avatar_url = json.avatar_url);
    _hasOwnProperty.call(json, "registration_time") && (this.registration_time = json.registration_time);
    _hasOwnProperty.call(json, "group") && (this.group = json.group);
    return this;
};
LifeService.UserInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.UserInfo.new = function () {
    return new LifeService.UserInfo();
};
LifeService.UserInfo.create = function (is) {
    return LifeService.UserInfo._readFrom(is);
};

LifeService.Column = function() {
    this.columnName = "";
    this.DBInt = true;
    this.columnValue = "";
    this._classname = "LifeService.Column";
};
LifeService.Column._classname = "LifeService.Column";
LifeService.Column._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.Column._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.Column._readFrom = function (is) {
    var tmp = new LifeService.Column;
    tmp.columnName = is.readString(0, true, "");
    tmp.DBInt = is.readBoolean(1, true, true);
    tmp.columnValue = is.readString(2, true, "");
    return tmp;
};
LifeService.Column.prototype._writeTo = function (os) {
    os.writeString(0, this.columnName);
    os.writeBoolean(1, this.DBInt);
    os.writeString(2, this.columnValue);
};
LifeService.Column.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.Column.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.Column.prototype.toObject = function() { 
    return {
        "columnName" : this.columnName,
        "DBInt" : this.DBInt,
        "columnValue" : this.columnValue
    };
};
LifeService.Column.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "columnName") && (this.columnName = json.columnName);
    _hasOwnProperty.call(json, "DBInt") && (this.DBInt = json.DBInt);
    _hasOwnProperty.call(json, "columnValue") && (this.columnValue = json.columnValue);
    return this;
};
LifeService.Column.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.Column.new = function () {
    return new LifeService.Column();
};
LifeService.Column.create = function (is) {
    return LifeService.Column._readFrom(is);
};

LifeService.ClubInfo = function() {
    this.club_id = "";
    this.name = "";
    this.chairman = "";
    this.create_time = "";
    this.introduction = "";
    this._classname = "LifeService.ClubInfo";
};
LifeService.ClubInfo._classname = "LifeService.ClubInfo";
LifeService.ClubInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.ClubInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.ClubInfo._readFrom = function (is) {
    var tmp = new LifeService.ClubInfo;
    tmp.club_id = is.readString(0, true, "");
    tmp.name = is.readString(1, true, "");
    tmp.chairman = is.readString(2, true, "");
    tmp.create_time = is.readString(3, true, "");
    tmp.introduction = is.readString(4, true, "");
    return tmp;
};
LifeService.ClubInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.club_id);
    os.writeString(1, this.name);
    os.writeString(2, this.chairman);
    os.writeString(3, this.create_time);
    os.writeString(4, this.introduction);
};
LifeService.ClubInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.ClubInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.ClubInfo.prototype.toObject = function() { 
    return {
        "club_id" : this.club_id,
        "name" : this.name,
        "chairman" : this.chairman,
        "create_time" : this.create_time,
        "introduction" : this.introduction
    };
};
LifeService.ClubInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "club_id") && (this.club_id = json.club_id);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "chairman") && (this.chairman = json.chairman);
    _hasOwnProperty.call(json, "create_time") && (this.create_time = json.create_time);
    _hasOwnProperty.call(json, "introduction") && (this.introduction = json.introduction);
    return this;
};
LifeService.ClubInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.ClubInfo.new = function () {
    return new LifeService.ClubInfo();
};
LifeService.ClubInfo.create = function (is) {
    return LifeService.ClubInfo._readFrom(is);
};

LifeService.ActivityInfo = function() {
    this.activity_id = "";
    this.name = "";
    this.sponsor = "";
    this.club_id = "";
    this.target_id = "";
    this.create_time = "";
    this.start_time = "";
    this.stop_time = "";
    this.registry_start_time = "";
    this.registry_stop_time = "";
    this.content = "";
    this._classname = "LifeService.ActivityInfo";
};
LifeService.ActivityInfo._classname = "LifeService.ActivityInfo";
LifeService.ActivityInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.ActivityInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.ActivityInfo._readFrom = function (is) {
    var tmp = new LifeService.ActivityInfo;
    tmp.activity_id = is.readString(0, true, "");
    tmp.name = is.readString(1, true, "");
    tmp.sponsor = is.readString(2, true, "");
    tmp.club_id = is.readString(3, true, "");
    tmp.target_id = is.readString(4, false, "");
    tmp.create_time = is.readString(5, false, "");
    tmp.start_time = is.readString(6, false, "");
    tmp.stop_time = is.readString(7, false, "");
    tmp.registry_start_time = is.readString(8, false, "");
    tmp.registry_stop_time = is.readString(9, false, "");
    tmp.content = is.readString(10, false, "");
    return tmp;
};
LifeService.ActivityInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.activity_id);
    os.writeString(1, this.name);
    os.writeString(2, this.sponsor);
    os.writeString(3, this.club_id);
    os.writeString(4, this.target_id);
    os.writeString(5, this.create_time);
    os.writeString(6, this.start_time);
    os.writeString(7, this.stop_time);
    os.writeString(8, this.registry_start_time);
    os.writeString(9, this.registry_stop_time);
    os.writeString(10, this.content);
};
LifeService.ActivityInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.ActivityInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.ActivityInfo.prototype.toObject = function() { 
    return {
        "activity_id" : this.activity_id,
        "name" : this.name,
        "sponsor" : this.sponsor,
        "club_id" : this.club_id,
        "target_id" : this.target_id,
        "create_time" : this.create_time,
        "start_time" : this.start_time,
        "stop_time" : this.stop_time,
        "registry_start_time" : this.registry_start_time,
        "registry_stop_time" : this.registry_stop_time,
        "content" : this.content
    };
};
LifeService.ActivityInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "activity_id") && (this.activity_id = json.activity_id);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "sponsor") && (this.sponsor = json.sponsor);
    _hasOwnProperty.call(json, "club_id") && (this.club_id = json.club_id);
    _hasOwnProperty.call(json, "target_id") && (this.target_id = json.target_id);
    _hasOwnProperty.call(json, "create_time") && (this.create_time = json.create_time);
    _hasOwnProperty.call(json, "start_time") && (this.start_time = json.start_time);
    _hasOwnProperty.call(json, "stop_time") && (this.stop_time = json.stop_time);
    _hasOwnProperty.call(json, "registry_start_time") && (this.registry_start_time = json.registry_start_time);
    _hasOwnProperty.call(json, "registry_stop_time") && (this.registry_stop_time = json.registry_stop_time);
    _hasOwnProperty.call(json, "content") && (this.content = json.content);
    return this;
};
LifeService.ActivityInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.ActivityInfo.new = function () {
    return new LifeService.ActivityInfo();
};
LifeService.ActivityInfo.create = function (is) {
    return LifeService.ActivityInfo._readFrom(is);
};

LifeService.Message = function() {
    this.message_id = "";
    this.user_id = "";
    this.content = "";
    this.anonymous = true;
    this.message_time = "";
    this.like_count = 0;
    this._classname = "LifeService.Message";
};
LifeService.Message._classname = "LifeService.Message";
LifeService.Message._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.Message._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.Message._readFrom = function (is) {
    var tmp = new LifeService.Message;
    tmp.message_id = is.readString(0, true, "");
    tmp.user_id = is.readString(1, true, "");
    tmp.content = is.readString(2, true, "");
    tmp.anonymous = is.readBoolean(3, true, true);
    tmp.message_time = is.readString(4, true, "");
    tmp.like_count = is.readInt32(5, false, 0);
    return tmp;
};
LifeService.Message.prototype._writeTo = function (os) {
    os.writeString(0, this.message_id);
    os.writeString(1, this.user_id);
    os.writeString(2, this.content);
    os.writeBoolean(3, this.anonymous);
    os.writeString(4, this.message_time);
    os.writeInt32(5, this.like_count);
};
LifeService.Message.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.Message.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.Message.prototype.toObject = function() { 
    return {
        "message_id" : this.message_id,
        "user_id" : this.user_id,
        "content" : this.content,
        "anonymous" : this.anonymous,
        "message_time" : this.message_time,
        "like_count" : this.like_count
    };
};
LifeService.Message.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "message_id") && (this.message_id = json.message_id);
    _hasOwnProperty.call(json, "user_id") && (this.user_id = json.user_id);
    _hasOwnProperty.call(json, "content") && (this.content = json.content);
    _hasOwnProperty.call(json, "anonymous") && (this.anonymous = json.anonymous);
    _hasOwnProperty.call(json, "message_time") && (this.message_time = json.message_time);
    _hasOwnProperty.call(json, "like_count") && (this.like_count = json.like_count);
    return this;
};
LifeService.Message.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.Message.new = function () {
    return new LifeService.Message();
};
LifeService.Message.create = function (is) {
    return LifeService.Message._readFrom(is);
};


