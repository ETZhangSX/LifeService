// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "MessageWall.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;
var _TARS_MODULE_A_ = require("./DataServiceTars.js");

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var LifeService = LifeService || {};
module.exports.LifeService = LifeService;

LifeService.MessageWallProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

LifeService.MessageWallProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

LifeService.MessageWallProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

LifeService.MessageWallProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

LifeService.MessageWallProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __LifeService_MessageWall$AddLike$IF = {
    "name" : "AddLike",
    "return" : "int32",
    "arguments" : [{
        "name" : "MessageId",
        "class" : "string",
        "direction" : "in"
    }]
};

var __LifeService_MessageWall$AddLike$IE = function (MessageId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, MessageId);
    return os.getBinBuffer();
};

var __LifeService_MessageWall$AddLike$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$AddLike$PE = function (MessageId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("MessageId", MessageId);
    return tup;
};

var __LifeService_MessageWall$AddLike$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$AddLike$ER = function (data) {
    throw _makeError(data, "Call MessageWall::AddLike failed");
};

LifeService.MessageWallProxy.prototype.AddLike = function (MessageId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("AddLike", __LifeService_MessageWall$AddLike$PE(MessageId, version), arguments[arguments.length - 1], __LifeService_MessageWall$AddLike$IF).then(__LifeService_MessageWall$AddLike$PD, __LifeService_MessageWall$AddLike$ER);
    } else {
        return this._worker.tars_invoke("AddLike", __LifeService_MessageWall$AddLike$IE(MessageId), arguments[arguments.length - 1], __LifeService_MessageWall$AddLike$IF).then(__LifeService_MessageWall$AddLike$ID, __LifeService_MessageWall$AddLike$ER);
    }
};
LifeService.MessageWallProxy.AddLike = __LifeService_MessageWall$AddLike$IF;

var __LifeService_MessageWall$GetLike$IF = {
    "name" : "GetLike",
    "return" : "int32",
    "arguments" : [{
        "name" : "MessageId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "LikeCount",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_MessageWall$GetLike$IE = function (MessageId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, MessageId);
    return os.getBinBuffer();
};

var __LifeService_MessageWall$GetLike$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "LikeCount" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$GetLike$PE = function (MessageId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("MessageId", MessageId);
    return tup;
};

var __LifeService_MessageWall$GetLike$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "LikeCount" : tup.readInt32("LikeCount")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$GetLike$ER = function (data) {
    throw _makeError(data, "Call MessageWall::GetLike failed");
};

LifeService.MessageWallProxy.prototype.GetLike = function (MessageId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("GetLike", __LifeService_MessageWall$GetLike$PE(MessageId, version), arguments[arguments.length - 1], __LifeService_MessageWall$GetLike$IF).then(__LifeService_MessageWall$GetLike$PD, __LifeService_MessageWall$GetLike$ER);
    } else {
        return this._worker.tars_invoke("GetLike", __LifeService_MessageWall$GetLike$IE(MessageId), arguments[arguments.length - 1], __LifeService_MessageWall$GetLike$IF).then(__LifeService_MessageWall$GetLike$ID, __LifeService_MessageWall$GetLike$ER);
    }
};
LifeService.MessageWallProxy.GetLike = __LifeService_MessageWall$GetLike$IF;

var __LifeService_MessageWall$GetMessageList$IF = {
    "name" : "GetMessageList",
    "return" : "int32",
    "arguments" : [{
        "name" : "Index",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Date",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "WxId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "NextIndex",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "MsgList",
        "class" : "list(LifeService.Message)",
        "direction" : "out"
    }]
};

var __LifeService_MessageWall$GetMessageList$IE = function (Index, Date, WxId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, Index);
    os.writeString(2, Date);
    os.writeString(3, WxId);
    return os.getBinBuffer();
};

var __LifeService_MessageWall$GetMessageList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "NextIndex" : is.readInt32(4, true, 0),
                    "MsgList" : is.readList(5, true, TarsStream.List(_TARS_MODULE_A_.LifeService.Message))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$GetMessageList$PE = function (Index, Date, WxId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("Index", Index);
    tup.writeString("Date", Date);
    tup.writeString("WxId", WxId);
    return tup;
};

var __LifeService_MessageWall$GetMessageList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "NextIndex" : tup.readInt32("NextIndex"),
                    "MsgList" : tup.readList("MsgList", TarsStream.List(_TARS_MODULE_A_.LifeService.Message))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$GetMessageList$ER = function (data) {
    throw _makeError(data, "Call MessageWall::GetMessageList failed");
};

LifeService.MessageWallProxy.prototype.GetMessageList = function (Index, Date, WxId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("GetMessageList", __LifeService_MessageWall$GetMessageList$PE(Index, Date, WxId, version), arguments[arguments.length - 1], __LifeService_MessageWall$GetMessageList$IF).then(__LifeService_MessageWall$GetMessageList$PD, __LifeService_MessageWall$GetMessageList$ER);
    } else {
        return this._worker.tars_invoke("GetMessageList", __LifeService_MessageWall$GetMessageList$IE(Index, Date, WxId), arguments[arguments.length - 1], __LifeService_MessageWall$GetMessageList$IF).then(__LifeService_MessageWall$GetMessageList$ID, __LifeService_MessageWall$GetMessageList$ER);
    }
};
LifeService.MessageWallProxy.GetMessageList = __LifeService_MessageWall$GetMessageList$IF;

var __LifeService_MessageWall$PostMessage$IF = {
    "name" : "PostMessage",
    "return" : "int32",
    "arguments" : [{
        "name" : "Msg",
        "class" : "LifeService.Message",
        "direction" : "in"
    }]
};

var __LifeService_MessageWall$PostMessage$IE = function (Msg) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, Msg);
    return os.getBinBuffer();
};

var __LifeService_MessageWall$PostMessage$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$PostMessage$PE = function (Msg, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("Msg", Msg);
    return tup;
};

var __LifeService_MessageWall$PostMessage$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_MessageWall$PostMessage$ER = function (data) {
    throw _makeError(data, "Call MessageWall::PostMessage failed");
};

LifeService.MessageWallProxy.prototype.PostMessage = function (Msg) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("PostMessage", __LifeService_MessageWall$PostMessage$PE(Msg, version), arguments[arguments.length - 1], __LifeService_MessageWall$PostMessage$IF).then(__LifeService_MessageWall$PostMessage$PD, __LifeService_MessageWall$PostMessage$ER);
    } else {
        return this._worker.tars_invoke("PostMessage", __LifeService_MessageWall$PostMessage$IE(Msg), arguments[arguments.length - 1], __LifeService_MessageWall$PostMessage$IF).then(__LifeService_MessageWall$PostMessage$ID, __LifeService_MessageWall$PostMessage$ER);
    }
};
LifeService.MessageWallProxy.PostMessage = __LifeService_MessageWall$PostMessage$IF;



