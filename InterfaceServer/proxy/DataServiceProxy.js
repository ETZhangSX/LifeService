// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "DataService.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var LifeService = LifeService || {};
module.exports.LifeService = LifeService;

LifeService.DataServiceProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

LifeService.DataServiceProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

LifeService.DataServiceProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

LifeService.DataServiceProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

LifeService.DataServiceProxy.prototype.getVersion = function () {
    return this._worker.version;
};

LifeService.UserInfo = function() {
    this.name = "";
    this.phone = "";
    this.gender = "";
    this.avatar_url = "";
    this.registration_time = "";
    this.group = 0;
    this._classname = "LifeService.UserInfo";
};
LifeService.UserInfo._classname = "LifeService.UserInfo";
LifeService.UserInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.UserInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.UserInfo._readFrom = function (is) {
    var tmp = new LifeService.UserInfo;
    tmp.name = is.readString(0, true, "");
    tmp.phone = is.readString(1, true, "");
    tmp.gender = is.readString(2, true, "");
    tmp.avatar_url = is.readString(3, true, "");
    tmp.registration_time = is.readString(4, true, "");
    tmp.group = is.readInt32(5, true, 0);
    return tmp;
};
LifeService.UserInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.name);
    os.writeString(1, this.phone);
    os.writeString(2, this.gender);
    os.writeString(3, this.avatar_url);
    os.writeString(4, this.registration_time);
    os.writeInt32(5, this.group);
};
LifeService.UserInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.UserInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.UserInfo.prototype.toObject = function() { 
    return {
        "name" : this.name,
        "phone" : this.phone,
        "gender" : this.gender,
        "avatar_url" : this.avatar_url,
        "registration_time" : this.registration_time,
        "group" : this.group
    };
};
LifeService.UserInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "phone") && (this.phone = json.phone);
    _hasOwnProperty.call(json, "gender") && (this.gender = json.gender);
    _hasOwnProperty.call(json, "avatar_url") && (this.avatar_url = json.avatar_url);
    _hasOwnProperty.call(json, "registration_time") && (this.registration_time = json.registration_time);
    _hasOwnProperty.call(json, "group") && (this.group = json.group);
    return this;
};
LifeService.UserInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.UserInfo.new = function () {
    return new LifeService.UserInfo();
};
LifeService.UserInfo.create = function (is) {
    return LifeService.UserInfo._readFrom(is);
};

LifeService.Column = function() {
    this.columnName = "";
    this.DBInt = true;
    this.columnValue = "";
    this._classname = "LifeService.Column";
};
LifeService.Column._classname = "LifeService.Column";
LifeService.Column._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.Column._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.Column._readFrom = function (is) {
    var tmp = new LifeService.Column;
    tmp.columnName = is.readString(0, true, "");
    tmp.DBInt = is.readBoolean(1, true, true);
    tmp.columnValue = is.readString(2, true, "");
    return tmp;
};
LifeService.Column.prototype._writeTo = function (os) {
    os.writeString(0, this.columnName);
    os.writeBoolean(1, this.DBInt);
    os.writeString(2, this.columnValue);
};
LifeService.Column.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.Column.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.Column.prototype.toObject = function() { 
    return {
        "columnName" : this.columnName,
        "DBInt" : this.DBInt,
        "columnValue" : this.columnValue
    };
};
LifeService.Column.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "columnName") && (this.columnName = json.columnName);
    _hasOwnProperty.call(json, "DBInt") && (this.DBInt = json.DBInt);
    _hasOwnProperty.call(json, "columnValue") && (this.columnValue = json.columnValue);
    return this;
};
LifeService.Column.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.Column.new = function () {
    return new LifeService.Column();
};
LifeService.Column.create = function (is) {
    return LifeService.Column._readFrom(is);
};

LifeService.ClubInfo = function() {
    this.club_id = "";
    this.name = "";
    this.chairman = "";
    this.create_time = "";
    this.introduction = "";
    this._classname = "LifeService.ClubInfo";
};
LifeService.ClubInfo._classname = "LifeService.ClubInfo";
LifeService.ClubInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.ClubInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.ClubInfo._readFrom = function (is) {
    var tmp = new LifeService.ClubInfo;
    tmp.club_id = is.readString(0, true, "");
    tmp.name = is.readString(1, true, "");
    tmp.chairman = is.readString(2, true, "");
    tmp.create_time = is.readString(3, true, "");
    tmp.introduction = is.readString(4, true, "");
    return tmp;
};
LifeService.ClubInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.club_id);
    os.writeString(1, this.name);
    os.writeString(2, this.chairman);
    os.writeString(3, this.create_time);
    os.writeString(4, this.introduction);
};
LifeService.ClubInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.ClubInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.ClubInfo.prototype.toObject = function() { 
    return {
        "club_id" : this.club_id,
        "name" : this.name,
        "chairman" : this.chairman,
        "create_time" : this.create_time,
        "introduction" : this.introduction
    };
};
LifeService.ClubInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "club_id") && (this.club_id = json.club_id);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "chairman") && (this.chairman = json.chairman);
    _hasOwnProperty.call(json, "create_time") && (this.create_time = json.create_time);
    _hasOwnProperty.call(json, "introduction") && (this.introduction = json.introduction);
    return this;
};
LifeService.ClubInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.ClubInfo.new = function () {
    return new LifeService.ClubInfo();
};
LifeService.ClubInfo.create = function (is) {
    return LifeService.ClubInfo._readFrom(is);
};

LifeService.ApplyInfo = function() {
    this.apply_id = "";
    this.apply_time = "";
    this.wx_id = "";
    this.club_id = "";
    this.user_name = "";
    this.club_name = "";
    this.avatar_url = "";
    this._classname = "LifeService.ApplyInfo";
};
LifeService.ApplyInfo._classname = "LifeService.ApplyInfo";
LifeService.ApplyInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.ApplyInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.ApplyInfo._readFrom = function (is) {
    var tmp = new LifeService.ApplyInfo;
    tmp.apply_id = is.readString(0, true, "");
    tmp.apply_time = is.readString(1, true, "");
    tmp.wx_id = is.readString(2, true, "");
    tmp.club_id = is.readString(3, true, "");
    tmp.user_name = is.readString(4, false, "");
    tmp.club_name = is.readString(5, false, "");
    tmp.avatar_url = is.readString(6, false, "");
    return tmp;
};
LifeService.ApplyInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.apply_id);
    os.writeString(1, this.apply_time);
    os.writeString(2, this.wx_id);
    os.writeString(3, this.club_id);
    os.writeString(4, this.user_name);
    os.writeString(5, this.club_name);
    os.writeString(6, this.avatar_url);
};
LifeService.ApplyInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.ApplyInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.ApplyInfo.prototype.toObject = function() { 
    return {
        "apply_id" : this.apply_id,
        "apply_time" : this.apply_time,
        "wx_id" : this.wx_id,
        "club_id" : this.club_id,
        "user_name" : this.user_name,
        "club_name" : this.club_name,
        "avatar_url" : this.avatar_url
    };
};
LifeService.ApplyInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "apply_id") && (this.apply_id = json.apply_id);
    _hasOwnProperty.call(json, "apply_time") && (this.apply_time = json.apply_time);
    _hasOwnProperty.call(json, "wx_id") && (this.wx_id = json.wx_id);
    _hasOwnProperty.call(json, "club_id") && (this.club_id = json.club_id);
    _hasOwnProperty.call(json, "user_name") && (this.user_name = json.user_name);
    _hasOwnProperty.call(json, "club_name") && (this.club_name = json.club_name);
    _hasOwnProperty.call(json, "avatar_url") && (this.avatar_url = json.avatar_url);
    return this;
};
LifeService.ApplyInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.ApplyInfo.new = function () {
    return new LifeService.ApplyInfo();
};
LifeService.ApplyInfo.create = function (is) {
    return LifeService.ApplyInfo._readFrom(is);
};

LifeService.ActivityInfo = function() {
    this.activity_id = "";
    this.name = "";
    this.sponsor = "";
    this.club_id = "";
    this.target_id = "";
    this.create_time = "";
    this.start_time = "";
    this.stop_time = "";
    this.registry_start_time = "";
    this.registry_stop_time = "";
    this.content = "";
    this._classname = "LifeService.ActivityInfo";
};
LifeService.ActivityInfo._classname = "LifeService.ActivityInfo";
LifeService.ActivityInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.ActivityInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.ActivityInfo._readFrom = function (is) {
    var tmp = new LifeService.ActivityInfo;
    tmp.activity_id = is.readString(0, true, "");
    tmp.name = is.readString(1, true, "");
    tmp.sponsor = is.readString(2, true, "");
    tmp.club_id = is.readString(3, true, "");
    tmp.target_id = is.readString(4, false, "");
    tmp.create_time = is.readString(5, false, "");
    tmp.start_time = is.readString(6, false, "");
    tmp.stop_time = is.readString(7, false, "");
    tmp.registry_start_time = is.readString(8, false, "");
    tmp.registry_stop_time = is.readString(9, false, "");
    tmp.content = is.readString(10, false, "");
    return tmp;
};
LifeService.ActivityInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.activity_id);
    os.writeString(1, this.name);
    os.writeString(2, this.sponsor);
    os.writeString(3, this.club_id);
    os.writeString(4, this.target_id);
    os.writeString(5, this.create_time);
    os.writeString(6, this.start_time);
    os.writeString(7, this.stop_time);
    os.writeString(8, this.registry_start_time);
    os.writeString(9, this.registry_stop_time);
    os.writeString(10, this.content);
};
LifeService.ActivityInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.ActivityInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.ActivityInfo.prototype.toObject = function() { 
    return {
        "activity_id" : this.activity_id,
        "name" : this.name,
        "sponsor" : this.sponsor,
        "club_id" : this.club_id,
        "target_id" : this.target_id,
        "create_time" : this.create_time,
        "start_time" : this.start_time,
        "stop_time" : this.stop_time,
        "registry_start_time" : this.registry_start_time,
        "registry_stop_time" : this.registry_stop_time,
        "content" : this.content
    };
};
LifeService.ActivityInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "activity_id") && (this.activity_id = json.activity_id);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "sponsor") && (this.sponsor = json.sponsor);
    _hasOwnProperty.call(json, "club_id") && (this.club_id = json.club_id);
    _hasOwnProperty.call(json, "target_id") && (this.target_id = json.target_id);
    _hasOwnProperty.call(json, "create_time") && (this.create_time = json.create_time);
    _hasOwnProperty.call(json, "start_time") && (this.start_time = json.start_time);
    _hasOwnProperty.call(json, "stop_time") && (this.stop_time = json.stop_time);
    _hasOwnProperty.call(json, "registry_start_time") && (this.registry_start_time = json.registry_start_time);
    _hasOwnProperty.call(json, "registry_stop_time") && (this.registry_stop_time = json.registry_stop_time);
    _hasOwnProperty.call(json, "content") && (this.content = json.content);
    return this;
};
LifeService.ActivityInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.ActivityInfo.new = function () {
    return new LifeService.ActivityInfo();
};
LifeService.ActivityInfo.create = function (is) {
    return LifeService.ActivityInfo._readFrom(is);
};

LifeService.Message = function() {
    this.message_id = "";
    this.user_id = "";
    this.receiver = "";
    this.content = "";
    this.anonymous = true;
    this.message_time = "";
    this.like_count = 0;
    this.user_name = "";
    this._classname = "LifeService.Message";
};
LifeService.Message._classname = "LifeService.Message";
LifeService.Message._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.Message._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.Message._readFrom = function (is) {
    var tmp = new LifeService.Message;
    tmp.message_id = is.readString(0, true, "");
    tmp.user_id = is.readString(1, true, "");
    tmp.receiver = is.readString(2, true, "");
    tmp.content = is.readString(3, true, "");
    tmp.anonymous = is.readBoolean(4, true, true);
    tmp.message_time = is.readString(5, true, "");
    tmp.like_count = is.readInt32(6, false, 0);
    tmp.user_name = is.readString(7, false, "");
    return tmp;
};
LifeService.Message.prototype._writeTo = function (os) {
    os.writeString(0, this.message_id);
    os.writeString(1, this.user_id);
    os.writeString(2, this.receiver);
    os.writeString(3, this.content);
    os.writeBoolean(4, this.anonymous);
    os.writeString(5, this.message_time);
    os.writeInt32(6, this.like_count);
    os.writeString(7, this.user_name);
};
LifeService.Message.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.Message.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.Message.prototype.toObject = function() { 
    return {
        "message_id" : this.message_id,
        "user_id" : this.user_id,
        "receiver" : this.receiver,
        "content" : this.content,
        "anonymous" : this.anonymous,
        "message_time" : this.message_time,
        "like_count" : this.like_count,
        "user_name" : this.user_name
    };
};
LifeService.Message.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "message_id") && (this.message_id = json.message_id);
    _hasOwnProperty.call(json, "user_id") && (this.user_id = json.user_id);
    _hasOwnProperty.call(json, "receiver") && (this.receiver = json.receiver);
    _hasOwnProperty.call(json, "content") && (this.content = json.content);
    _hasOwnProperty.call(json, "anonymous") && (this.anonymous = json.anonymous);
    _hasOwnProperty.call(json, "message_time") && (this.message_time = json.message_time);
    _hasOwnProperty.call(json, "like_count") && (this.like_count = json.like_count);
    _hasOwnProperty.call(json, "user_name") && (this.user_name = json.user_name);
    return this;
};
LifeService.Message.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.Message.new = function () {
    return new LifeService.Message();
};
LifeService.Message.create = function (is) {
    return LifeService.Message._readFrom(is);
};

var __LifeService_DataService$addLike$IF = {
    "name" : "addLike",
    "return" : "int32",
    "arguments" : [{
        "name" : "message_id",
        "class" : "string",
        "direction" : "in"
    }]
};

var __LifeService_DataService$addLike$IE = function (message_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, message_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$addLike$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$addLike$PE = function (message_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("message_id", message_id);
    return tup;
};

var __LifeService_DataService$addLike$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$addLike$ER = function (data) {
    throw _makeError(data, "Call DataService::addLike failed");
};

LifeService.DataServiceProxy.prototype.addLike = function (message_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("addLike", __LifeService_DataService$addLike$PE(message_id, version), arguments[arguments.length - 1], __LifeService_DataService$addLike$IF).then(__LifeService_DataService$addLike$PD, __LifeService_DataService$addLike$ER);
    } else {
        return this._worker.tars_invoke("addLike", __LifeService_DataService$addLike$IE(message_id), arguments[arguments.length - 1], __LifeService_DataService$addLike$IF).then(__LifeService_DataService$addLike$ID, __LifeService_DataService$addLike$ER);
    }
};
LifeService.DataServiceProxy.addLike = __LifeService_DataService$addLike$IF;

var __LifeService_DataService$createClub$IF = {
    "name" : "createClub",
    "return" : "int32",
    "arguments" : [{
        "name" : "clubInfo",
        "class" : "LifeService.ClubInfo",
        "direction" : "in"
    }, {
        "name" : "iRetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_DataService$createClub$IE = function (clubInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, clubInfo);
    return os.getBinBuffer();
};

var __LifeService_DataService$createClub$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "iRetCode" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createClub$PE = function (clubInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("clubInfo", clubInfo);
    return tup;
};

var __LifeService_DataService$createClub$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "iRetCode" : tup.readInt32("iRetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createClub$ER = function (data) {
    throw _makeError(data, "Call DataService::createClub failed");
};

LifeService.DataServiceProxy.prototype.createClub = function (clubInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createClub", __LifeService_DataService$createClub$PE(clubInfo, version), arguments[arguments.length - 1], __LifeService_DataService$createClub$IF).then(__LifeService_DataService$createClub$PD, __LifeService_DataService$createClub$ER);
    } else {
        return this._worker.tars_invoke("createClub", __LifeService_DataService$createClub$IE(clubInfo), arguments[arguments.length - 1], __LifeService_DataService$createClub$IF).then(__LifeService_DataService$createClub$ID, __LifeService_DataService$createClub$ER);
    }
};
LifeService.DataServiceProxy.createClub = __LifeService_DataService$createClub$IF;

var __LifeService_DataService$createUser$IF = {
    "name" : "createUser",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "UserInfo",
        "class" : "LifeService.UserInfo",
        "direction" : "in"
    }]
};

var __LifeService_DataService$createUser$IE = function (wx_id, UserInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeStruct(2, UserInfo);
    return os.getBinBuffer();
};

var __LifeService_DataService$createUser$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createUser$PE = function (wx_id, UserInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeStruct("UserInfo", UserInfo);
    return tup;
};

var __LifeService_DataService$createUser$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createUser$ER = function (data) {
    throw _makeError(data, "Call DataService::createUser failed");
};

LifeService.DataServiceProxy.prototype.createUser = function (wx_id, UserInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createUser", __LifeService_DataService$createUser$PE(wx_id, UserInfo, version), arguments[arguments.length - 1], __LifeService_DataService$createUser$IF).then(__LifeService_DataService$createUser$PD, __LifeService_DataService$createUser$ER);
    } else {
        return this._worker.tars_invoke("createUser", __LifeService_DataService$createUser$IE(wx_id, UserInfo), arguments[arguments.length - 1], __LifeService_DataService$createUser$IF).then(__LifeService_DataService$createUser$ID, __LifeService_DataService$createUser$ER);
    }
};
LifeService.DataServiceProxy.createUser = __LifeService_DataService$createUser$IF;

var __LifeService_DataService$deleteActivity$IF = {
    "name" : "deleteActivity",
    "return" : "int32",
    "arguments" : [{
        "name" : "activity_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "iRetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_DataService$deleteActivity$IE = function (activity_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, activity_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$deleteActivity$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "iRetCode" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$deleteActivity$PE = function (activity_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("activity_id", activity_id);
    return tup;
};

var __LifeService_DataService$deleteActivity$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "iRetCode" : tup.readInt32("iRetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$deleteActivity$ER = function (data) {
    throw _makeError(data, "Call DataService::deleteActivity failed");
};

LifeService.DataServiceProxy.prototype.deleteActivity = function (activity_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deleteActivity", __LifeService_DataService$deleteActivity$PE(activity_id, version), arguments[arguments.length - 1], __LifeService_DataService$deleteActivity$IF).then(__LifeService_DataService$deleteActivity$PD, __LifeService_DataService$deleteActivity$ER);
    } else {
        return this._worker.tars_invoke("deleteActivity", __LifeService_DataService$deleteActivity$IE(activity_id), arguments[arguments.length - 1], __LifeService_DataService$deleteActivity$IF).then(__LifeService_DataService$deleteActivity$ID, __LifeService_DataService$deleteActivity$ER);
    }
};
LifeService.DataServiceProxy.deleteActivity = __LifeService_DataService$deleteActivity$IF;

var __LifeService_DataService$deleteApply$IF = {
    "name" : "deleteApply",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "club_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "iRetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_DataService$deleteApply$IE = function (wx_id, club_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeString(2, club_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$deleteApply$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "iRetCode" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$deleteApply$PE = function (wx_id, club_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeString("club_id", club_id);
    return tup;
};

var __LifeService_DataService$deleteApply$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "iRetCode" : tup.readInt32("iRetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$deleteApply$ER = function (data) {
    throw _makeError(data, "Call DataService::deleteApply failed");
};

LifeService.DataServiceProxy.prototype.deleteApply = function (wx_id, club_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deleteApply", __LifeService_DataService$deleteApply$PE(wx_id, club_id, version), arguments[arguments.length - 1], __LifeService_DataService$deleteApply$IF).then(__LifeService_DataService$deleteApply$PD, __LifeService_DataService$deleteApply$ER);
    } else {
        return this._worker.tars_invoke("deleteApply", __LifeService_DataService$deleteApply$IE(wx_id, club_id), arguments[arguments.length - 1], __LifeService_DataService$deleteApply$IF).then(__LifeService_DataService$deleteApply$ID, __LifeService_DataService$deleteApply$ER);
    }
};
LifeService.DataServiceProxy.deleteApply = __LifeService_DataService$deleteApply$IF;

var __LifeService_DataService$getActivityList$IF = {
    "name" : "getActivityList",
    "return" : "int32",
    "arguments" : [{
        "name" : "index",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "batch",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "club_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nextIndex",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "activityList",
        "class" : "list(map(string, string))",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getActivityList$IE = function (index, batch, wx_id, club_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, index);
    os.writeInt32(2, batch);
    os.writeString(3, wx_id);
    os.writeString(4, club_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getActivityList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "nextIndex" : is.readInt32(5, true, 0),
                    "activityList" : is.readList(6, true, TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getActivityList$PE = function (index, batch, wx_id, club_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("index", index);
    tup.writeInt32("batch", batch);
    tup.writeString("wx_id", wx_id);
    tup.writeString("club_id", club_id);
    return tup;
};

var __LifeService_DataService$getActivityList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "nextIndex" : tup.readInt32("nextIndex"),
                    "activityList" : tup.readList("activityList", TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getActivityList$ER = function (data) {
    throw _makeError(data, "Call DataService::getActivityList failed");
};

LifeService.DataServiceProxy.prototype.getActivityList = function (index, batch, wx_id, club_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getActivityList", __LifeService_DataService$getActivityList$PE(index, batch, wx_id, club_id, version), arguments[arguments.length - 1], __LifeService_DataService$getActivityList$IF).then(__LifeService_DataService$getActivityList$PD, __LifeService_DataService$getActivityList$ER);
    } else {
        return this._worker.tars_invoke("getActivityList", __LifeService_DataService$getActivityList$IE(index, batch, wx_id, club_id), arguments[arguments.length - 1], __LifeService_DataService$getActivityList$IF).then(__LifeService_DataService$getActivityList$ID, __LifeService_DataService$getActivityList$ER);
    }
};
LifeService.DataServiceProxy.getActivityList = __LifeService_DataService$getActivityList$IF;

var __LifeService_DataService$getApplyListByClubId$IF = {
    "name" : "getApplyListByClubId",
    "return" : "int32",
    "arguments" : [{
        "name" : "club_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "index",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "batch",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "apply_status",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "nextIndex",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "applyList",
        "class" : "list(LifeService.ApplyInfo)",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getApplyListByClubId$IE = function (club_id, index, batch, apply_status) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, club_id);
    os.writeInt32(2, index);
    os.writeInt32(3, batch);
    os.writeInt32(4, apply_status);
    return os.getBinBuffer();
};

var __LifeService_DataService$getApplyListByClubId$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "nextIndex" : is.readInt32(5, true, 0),
                    "applyList" : is.readList(6, true, TarsStream.List(LifeService.ApplyInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getApplyListByClubId$PE = function (club_id, index, batch, apply_status, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("club_id", club_id);
    tup.writeInt32("index", index);
    tup.writeInt32("batch", batch);
    tup.writeInt32("apply_status", apply_status);
    return tup;
};

var __LifeService_DataService$getApplyListByClubId$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "nextIndex" : tup.readInt32("nextIndex"),
                    "applyList" : tup.readList("applyList", TarsStream.List(LifeService.ApplyInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getApplyListByClubId$ER = function (data) {
    throw _makeError(data, "Call DataService::getApplyListByClubId failed");
};

LifeService.DataServiceProxy.prototype.getApplyListByClubId = function (club_id, index, batch, apply_status) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getApplyListByClubId", __LifeService_DataService$getApplyListByClubId$PE(club_id, index, batch, apply_status, version), arguments[arguments.length - 1], __LifeService_DataService$getApplyListByClubId$IF).then(__LifeService_DataService$getApplyListByClubId$PD, __LifeService_DataService$getApplyListByClubId$ER);
    } else {
        return this._worker.tars_invoke("getApplyListByClubId", __LifeService_DataService$getApplyListByClubId$IE(club_id, index, batch, apply_status), arguments[arguments.length - 1], __LifeService_DataService$getApplyListByClubId$IF).then(__LifeService_DataService$getApplyListByClubId$ID, __LifeService_DataService$getApplyListByClubId$ER);
    }
};
LifeService.DataServiceProxy.getApplyListByClubId = __LifeService_DataService$getApplyListByClubId$IF;

var __LifeService_DataService$getApplyListByUserId$IF = {
    "name" : "getApplyListByUserId",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "index",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "batch",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "apply_status",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "nextIndex",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "applyList",
        "class" : "list(LifeService.ApplyInfo)",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getApplyListByUserId$IE = function (wx_id, index, batch, apply_status) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeInt32(2, index);
    os.writeInt32(3, batch);
    os.writeInt32(4, apply_status);
    return os.getBinBuffer();
};

var __LifeService_DataService$getApplyListByUserId$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "nextIndex" : is.readInt32(5, true, 0),
                    "applyList" : is.readList(6, true, TarsStream.List(LifeService.ApplyInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getApplyListByUserId$PE = function (wx_id, index, batch, apply_status, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeInt32("index", index);
    tup.writeInt32("batch", batch);
    tup.writeInt32("apply_status", apply_status);
    return tup;
};

var __LifeService_DataService$getApplyListByUserId$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "nextIndex" : tup.readInt32("nextIndex"),
                    "applyList" : tup.readList("applyList", TarsStream.List(LifeService.ApplyInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getApplyListByUserId$ER = function (data) {
    throw _makeError(data, "Call DataService::getApplyListByUserId failed");
};

LifeService.DataServiceProxy.prototype.getApplyListByUserId = function (wx_id, index, batch, apply_status) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getApplyListByUserId", __LifeService_DataService$getApplyListByUserId$PE(wx_id, index, batch, apply_status, version), arguments[arguments.length - 1], __LifeService_DataService$getApplyListByUserId$IF).then(__LifeService_DataService$getApplyListByUserId$PD, __LifeService_DataService$getApplyListByUserId$ER);
    } else {
        return this._worker.tars_invoke("getApplyListByUserId", __LifeService_DataService$getApplyListByUserId$IE(wx_id, index, batch, apply_status), arguments[arguments.length - 1], __LifeService_DataService$getApplyListByUserId$IF).then(__LifeService_DataService$getApplyListByUserId$ID, __LifeService_DataService$getApplyListByUserId$ER);
    }
};
LifeService.DataServiceProxy.getApplyListByUserId = __LifeService_DataService$getApplyListByUserId$IF;

var __LifeService_DataService$getClubList$IF = {
    "name" : "getClubList",
    "return" : "int32",
    "arguments" : [{
        "name" : "index",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "batch",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nextIndex",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "clubInfoList",
        "class" : "list(LifeService.ClubInfo)",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getClubList$IE = function (index, batch, wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, index);
    os.writeInt32(2, batch);
    os.writeString(3, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getClubList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "nextIndex" : is.readInt32(4, true, 0),
                    "clubInfoList" : is.readList(5, true, TarsStream.List(LifeService.ClubInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getClubList$PE = function (index, batch, wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("index", index);
    tup.writeInt32("batch", batch);
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$getClubList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "nextIndex" : tup.readInt32("nextIndex"),
                    "clubInfoList" : tup.readList("clubInfoList", TarsStream.List(LifeService.ClubInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getClubList$ER = function (data) {
    throw _makeError(data, "Call DataService::getClubList failed");
};

LifeService.DataServiceProxy.prototype.getClubList = function (index, batch, wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getClubList", __LifeService_DataService$getClubList$PE(index, batch, wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$getClubList$IF).then(__LifeService_DataService$getClubList$PD, __LifeService_DataService$getClubList$ER);
    } else {
        return this._worker.tars_invoke("getClubList", __LifeService_DataService$getClubList$IE(index, batch, wx_id), arguments[arguments.length - 1], __LifeService_DataService$getClubList$IF).then(__LifeService_DataService$getClubList$ID, __LifeService_DataService$getClubList$ER);
    }
};
LifeService.DataServiceProxy.getClubList = __LifeService_DataService$getClubList$IF;

var __LifeService_DataService$getGroupByGroupId$IF = {
    "name" : "getGroupByGroupId",
    "return" : "int32",
    "arguments" : [{
        "name" : "groupId",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "group",
        "class" : "string",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getGroupByGroupId$IE = function (groupId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, groupId);
    return os.getBinBuffer();
};

var __LifeService_DataService$getGroupByGroupId$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "group" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByGroupId$PE = function (groupId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("groupId", groupId);
    return tup;
};

var __LifeService_DataService$getGroupByGroupId$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "group" : tup.readString("group")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByGroupId$ER = function (data) {
    throw _makeError(data, "Call DataService::getGroupByGroupId failed");
};

LifeService.DataServiceProxy.prototype.getGroupByGroupId = function (groupId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGroupByGroupId", __LifeService_DataService$getGroupByGroupId$PE(groupId, version), arguments[arguments.length - 1], __LifeService_DataService$getGroupByGroupId$IF).then(__LifeService_DataService$getGroupByGroupId$PD, __LifeService_DataService$getGroupByGroupId$ER);
    } else {
        return this._worker.tars_invoke("getGroupByGroupId", __LifeService_DataService$getGroupByGroupId$IE(groupId), arguments[arguments.length - 1], __LifeService_DataService$getGroupByGroupId$IF).then(__LifeService_DataService$getGroupByGroupId$ID, __LifeService_DataService$getGroupByGroupId$ER);
    }
};
LifeService.DataServiceProxy.getGroupByGroupId = __LifeService_DataService$getGroupByGroupId$IF;

var __LifeService_DataService$getGroupByUserId$IF = {
    "name" : "getGroupByUserId",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "group",
        "class" : "string",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getGroupByUserId$IE = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getGroupByUserId$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "group" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByUserId$PE = function (wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$getGroupByUserId$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "group" : tup.readString("group")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByUserId$ER = function (data) {
    throw _makeError(data, "Call DataService::getGroupByUserId failed");
};

LifeService.DataServiceProxy.prototype.getGroupByUserId = function (wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGroupByUserId", __LifeService_DataService$getGroupByUserId$PE(wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$getGroupByUserId$IF).then(__LifeService_DataService$getGroupByUserId$PD, __LifeService_DataService$getGroupByUserId$ER);
    } else {
        return this._worker.tars_invoke("getGroupByUserId", __LifeService_DataService$getGroupByUserId$IE(wx_id), arguments[arguments.length - 1], __LifeService_DataService$getGroupByUserId$IF).then(__LifeService_DataService$getGroupByUserId$ID, __LifeService_DataService$getGroupByUserId$ER);
    }
};
LifeService.DataServiceProxy.getGroupByUserId = __LifeService_DataService$getGroupByUserId$IF;

var __LifeService_DataService$getGroupInfo$IF = {
    "name" : "getGroupInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "groupInfo",
        "class" : "map(int32, string)",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getGroupInfo$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __LifeService_DataService$getGroupInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "groupInfo" : is.readMap(1, true, TarsStream.Map(TarsStream.Int32, TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupInfo$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __LifeService_DataService$getGroupInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "groupInfo" : tup.readMap("groupInfo", TarsStream.Map(TarsStream.Int32, TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupInfo$ER = function (data) {
    throw _makeError(data, "Call DataService::getGroupInfo failed");
};

LifeService.DataServiceProxy.prototype.getGroupInfo = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGroupInfo", __LifeService_DataService$getGroupInfo$PE(version), arguments[arguments.length - 1], __LifeService_DataService$getGroupInfo$IF).then(__LifeService_DataService$getGroupInfo$PD, __LifeService_DataService$getGroupInfo$ER);
    } else {
        return this._worker.tars_invoke("getGroupInfo", __LifeService_DataService$getGroupInfo$IE(), arguments[arguments.length - 1], __LifeService_DataService$getGroupInfo$IF).then(__LifeService_DataService$getGroupInfo$ID, __LifeService_DataService$getGroupInfo$ER);
    }
};
LifeService.DataServiceProxy.getGroupInfo = __LifeService_DataService$getGroupInfo$IF;

var __LifeService_DataService$getLike$IF = {
    "name" : "getLike",
    "return" : "int32",
    "arguments" : [{
        "name" : "message_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "like_count",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getLike$IE = function (message_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, message_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getLike$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "like_count" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getLike$PE = function (message_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("message_id", message_id);
    return tup;
};

var __LifeService_DataService$getLike$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "like_count" : tup.readInt32("like_count")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getLike$ER = function (data) {
    throw _makeError(data, "Call DataService::getLike failed");
};

LifeService.DataServiceProxy.prototype.getLike = function (message_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getLike", __LifeService_DataService$getLike$PE(message_id, version), arguments[arguments.length - 1], __LifeService_DataService$getLike$IF).then(__LifeService_DataService$getLike$PD, __LifeService_DataService$getLike$ER);
    } else {
        return this._worker.tars_invoke("getLike", __LifeService_DataService$getLike$IE(message_id), arguments[arguments.length - 1], __LifeService_DataService$getLike$IF).then(__LifeService_DataService$getLike$ID, __LifeService_DataService$getLike$ER);
    }
};
LifeService.DataServiceProxy.getLike = __LifeService_DataService$getLike$IF;

var __LifeService_DataService$getMsgList$IF = {
    "name" : "getMsgList",
    "return" : "int32",
    "arguments" : [{
        "name" : "index",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "date",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "nextIndex",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "msgList",
        "class" : "list(LifeService.Message)",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getMsgList$IE = function (index, date, wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, index);
    os.writeString(2, date);
    os.writeString(3, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getMsgList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "nextIndex" : is.readInt32(4, true, 0),
                    "msgList" : is.readList(5, true, TarsStream.List(LifeService.Message))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getMsgList$PE = function (index, date, wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("index", index);
    tup.writeString("date", date);
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$getMsgList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "nextIndex" : tup.readInt32("nextIndex"),
                    "msgList" : tup.readList("msgList", TarsStream.List(LifeService.Message))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getMsgList$ER = function (data) {
    throw _makeError(data, "Call DataService::getMsgList failed");
};

LifeService.DataServiceProxy.prototype.getMsgList = function (index, date, wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getMsgList", __LifeService_DataService$getMsgList$PE(index, date, wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$getMsgList$IF).then(__LifeService_DataService$getMsgList$PD, __LifeService_DataService$getMsgList$ER);
    } else {
        return this._worker.tars_invoke("getMsgList", __LifeService_DataService$getMsgList$IE(index, date, wx_id), arguments[arguments.length - 1], __LifeService_DataService$getMsgList$IF).then(__LifeService_DataService$getMsgList$ID, __LifeService_DataService$getMsgList$ER);
    }
};
LifeService.DataServiceProxy.getMsgList = __LifeService_DataService$getMsgList$IF;

var __LifeService_DataService$getRecordCount$IF = {
    "name" : "getRecordCount",
    "return" : "int32",
    "arguments" : [{
        "name" : "sTableName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sCondition",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "iCount",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getRecordCount$IE = function (sTableName, sCondition) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, sTableName);
    os.writeString(2, sCondition);
    return os.getBinBuffer();
};

var __LifeService_DataService$getRecordCount$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "iCount" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getRecordCount$PE = function (sTableName, sCondition, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("sTableName", sTableName);
    tup.writeString("sCondition", sCondition);
    return tup;
};

var __LifeService_DataService$getRecordCount$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "iCount" : tup.readInt32("iCount")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getRecordCount$ER = function (data) {
    throw _makeError(data, "Call DataService::getRecordCount failed");
};

LifeService.DataServiceProxy.prototype.getRecordCount = function (sTableName, sCondition) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getRecordCount", __LifeService_DataService$getRecordCount$PE(sTableName, sCondition, version), arguments[arguments.length - 1], __LifeService_DataService$getRecordCount$IF).then(__LifeService_DataService$getRecordCount$PD, __LifeService_DataService$getRecordCount$ER);
    } else {
        return this._worker.tars_invoke("getRecordCount", __LifeService_DataService$getRecordCount$IE(sTableName, sCondition), arguments[arguments.length - 1], __LifeService_DataService$getRecordCount$IF).then(__LifeService_DataService$getRecordCount$ID, __LifeService_DataService$getRecordCount$ER);
    }
};
LifeService.DataServiceProxy.getRecordCount = __LifeService_DataService$getRecordCount$IF;

var __LifeService_DataService$getUserInfo$IF = {
    "name" : "getUserInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sRsp",
        "class" : "LifeService.UserInfo",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getUserInfo$IE = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getUserInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sRsp" : is.readStruct(2, true, LifeService.UserInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getUserInfo$PE = function (wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$getUserInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "sRsp" : tup.readStruct("sRsp", LifeService.UserInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getUserInfo$ER = function (data) {
    throw _makeError(data, "Call DataService::getUserInfo failed");
};

LifeService.DataServiceProxy.prototype.getUserInfo = function (wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getUserInfo", __LifeService_DataService$getUserInfo$PE(wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$getUserInfo$IF).then(__LifeService_DataService$getUserInfo$PD, __LifeService_DataService$getUserInfo$ER);
    } else {
        return this._worker.tars_invoke("getUserInfo", __LifeService_DataService$getUserInfo$IE(wx_id), arguments[arguments.length - 1], __LifeService_DataService$getUserInfo$IF).then(__LifeService_DataService$getUserInfo$ID, __LifeService_DataService$getUserInfo$ER);
    }
};
LifeService.DataServiceProxy.getUserInfo = __LifeService_DataService$getUserInfo$IF;

var __LifeService_DataService$hasUser$IF = {
    "name" : "hasUser",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sRsp",
        "class" : "bool",
        "direction" : "out"
    }]
};

var __LifeService_DataService$hasUser$IE = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$hasUser$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sRsp" : is.readBoolean(2, true, true)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$hasUser$PE = function (wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$hasUser$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "sRsp" : tup.readBoolean("sRsp")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$hasUser$ER = function (data) {
    throw _makeError(data, "Call DataService::hasUser failed");
};

LifeService.DataServiceProxy.prototype.hasUser = function (wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("hasUser", __LifeService_DataService$hasUser$PE(wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$hasUser$IF).then(__LifeService_DataService$hasUser$PD, __LifeService_DataService$hasUser$ER);
    } else {
        return this._worker.tars_invoke("hasUser", __LifeService_DataService$hasUser$IE(wx_id), arguments[arguments.length - 1], __LifeService_DataService$hasUser$IF).then(__LifeService_DataService$hasUser$ID, __LifeService_DataService$hasUser$ER);
    }
};
LifeService.DataServiceProxy.hasUser = __LifeService_DataService$hasUser$IF;

var __LifeService_DataService$insertData$IF = {
    "name" : "insertData",
    "return" : "int32",
    "arguments" : [{
        "name" : "sTableName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sColumns",
        "class" : "list(LifeService.Column)",
        "direction" : "in"
    }]
};

var __LifeService_DataService$insertData$IE = function (sTableName, sColumns) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, sTableName);
    os.writeList(2, sColumns);
    return os.getBinBuffer();
};

var __LifeService_DataService$insertData$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$insertData$PE = function (sTableName, sColumns, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("sTableName", sTableName);
    tup.writeList("sColumns", sColumns);
    return tup;
};

var __LifeService_DataService$insertData$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$insertData$ER = function (data) {
    throw _makeError(data, "Call DataService::insertData failed");
};

LifeService.DataServiceProxy.prototype.insertData = function (sTableName, sColumns) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("insertData", __LifeService_DataService$insertData$PE(sTableName, sColumns, version), arguments[arguments.length - 1], __LifeService_DataService$insertData$IF).then(__LifeService_DataService$insertData$PD, __LifeService_DataService$insertData$ER);
    } else {
        return this._worker.tars_invoke("insertData", __LifeService_DataService$insertData$IE(sTableName, sColumns), arguments[arguments.length - 1], __LifeService_DataService$insertData$IF).then(__LifeService_DataService$insertData$ID, __LifeService_DataService$insertData$ER);
    }
};
LifeService.DataServiceProxy.insertData = __LifeService_DataService$insertData$IF;

var __LifeService_DataService$insertMessage$IF = {
    "name" : "insertMessage",
    "return" : "int32",
    "arguments" : [{
        "name" : "msg",
        "class" : "LifeService.Message",
        "direction" : "in"
    }]
};

var __LifeService_DataService$insertMessage$IE = function (msg) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, msg);
    return os.getBinBuffer();
};

var __LifeService_DataService$insertMessage$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$insertMessage$PE = function (msg, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("msg", msg);
    return tup;
};

var __LifeService_DataService$insertMessage$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$insertMessage$ER = function (data) {
    throw _makeError(data, "Call DataService::insertMessage failed");
};

LifeService.DataServiceProxy.prototype.insertMessage = function (msg) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("insertMessage", __LifeService_DataService$insertMessage$PE(msg, version), arguments[arguments.length - 1], __LifeService_DataService$insertMessage$IF).then(__LifeService_DataService$insertMessage$PD, __LifeService_DataService$insertMessage$ER);
    } else {
        return this._worker.tars_invoke("insertMessage", __LifeService_DataService$insertMessage$IE(msg), arguments[arguments.length - 1], __LifeService_DataService$insertMessage$IF).then(__LifeService_DataService$insertMessage$ID, __LifeService_DataService$insertMessage$ER);
    }
};
LifeService.DataServiceProxy.insertMessage = __LifeService_DataService$insertMessage$IF;

var __LifeService_DataService$queryData$IF = {
    "name" : "queryData",
    "return" : "int32",
    "arguments" : [{
        "name" : "sTableName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sColumns",
        "class" : "list(string)",
        "direction" : "in"
    }, {
        "name" : "sCondition",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sRsp",
        "class" : "list(map(string, string))",
        "direction" : "out"
    }]
};

var __LifeService_DataService$queryData$IE = function (sTableName, sColumns, sCondition) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, sTableName);
    os.writeList(2, sColumns);
    os.writeString(3, sCondition);
    return os.getBinBuffer();
};

var __LifeService_DataService$queryData$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sRsp" : is.readList(4, true, TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$queryData$PE = function (sTableName, sColumns, sCondition, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("sTableName", sTableName);
    tup.writeList("sColumns", sColumns);
    tup.writeString("sCondition", sCondition);
    return tup;
};

var __LifeService_DataService$queryData$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "sRsp" : tup.readList("sRsp", TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$queryData$ER = function (data) {
    throw _makeError(data, "Call DataService::queryData failed");
};

LifeService.DataServiceProxy.prototype.queryData = function (sTableName, sColumns, sCondition) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryData", __LifeService_DataService$queryData$PE(sTableName, sColumns, sCondition, version), arguments[arguments.length - 1], __LifeService_DataService$queryData$IF).then(__LifeService_DataService$queryData$PD, __LifeService_DataService$queryData$ER);
    } else {
        return this._worker.tars_invoke("queryData", __LifeService_DataService$queryData$IE(sTableName, sColumns, sCondition), arguments[arguments.length - 1], __LifeService_DataService$queryData$IF).then(__LifeService_DataService$queryData$ID, __LifeService_DataService$queryData$ER);
    }
};
LifeService.DataServiceProxy.queryData = __LifeService_DataService$queryData$IF;

var __LifeService_DataService$setApplyStatus$IF = {
    "name" : "setApplyStatus",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "club_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "apply_status",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "iRetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_DataService$setApplyStatus$IE = function (wx_id, club_id, apply_status) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeString(2, club_id);
    os.writeInt32(3, apply_status);
    return os.getBinBuffer();
};

var __LifeService_DataService$setApplyStatus$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "iRetCode" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$setApplyStatus$PE = function (wx_id, club_id, apply_status, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeString("club_id", club_id);
    tup.writeInt32("apply_status", apply_status);
    return tup;
};

var __LifeService_DataService$setApplyStatus$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "iRetCode" : tup.readInt32("iRetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$setApplyStatus$ER = function (data) {
    throw _makeError(data, "Call DataService::setApplyStatus failed");
};

LifeService.DataServiceProxy.prototype.setApplyStatus = function (wx_id, club_id, apply_status) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("setApplyStatus", __LifeService_DataService$setApplyStatus$PE(wx_id, club_id, apply_status, version), arguments[arguments.length - 1], __LifeService_DataService$setApplyStatus$IF).then(__LifeService_DataService$setApplyStatus$PD, __LifeService_DataService$setApplyStatus$ER);
    } else {
        return this._worker.tars_invoke("setApplyStatus", __LifeService_DataService$setApplyStatus$IE(wx_id, club_id, apply_status), arguments[arguments.length - 1], __LifeService_DataService$setApplyStatus$IF).then(__LifeService_DataService$setApplyStatus$ID, __LifeService_DataService$setApplyStatus$ER);
    }
};
LifeService.DataServiceProxy.setApplyStatus = __LifeService_DataService$setApplyStatus$IF;



