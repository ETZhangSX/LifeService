// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "ClubActivityManager.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;
var _TARS_MODULE_A_ = require("./DataServiceTars.js");

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var LifeService = LifeService || {};
module.exports.LifeService = LifeService;

LifeService.ClubActivityManagerProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

LifeService.ClubActivityManagerProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

LifeService.ClubActivityManagerProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

LifeService.ClubActivityManagerProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

LifeService.ClubActivityManagerProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __LifeService_ClubActivityManager$ApplyForActivity$IF = {
    "name" : "ApplyForActivity",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activityId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "RetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$ApplyForActivity$IE = function (wx_id, activityId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeString(2, activityId);
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$ApplyForActivity$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "RetCode" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$ApplyForActivity$PE = function (wx_id, activityId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeString("activityId", activityId);
    return tup;
};

var __LifeService_ClubActivityManager$ApplyForActivity$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "RetCode" : tup.readInt32("RetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$ApplyForActivity$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::ApplyForActivity failed");
};

LifeService.ClubActivityManagerProxy.prototype.ApplyForActivity = function (wx_id, activityId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("ApplyForActivity", __LifeService_ClubActivityManager$ApplyForActivity$PE(wx_id, activityId, version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$ApplyForActivity$IF).then(__LifeService_ClubActivityManager$ApplyForActivity$PD, __LifeService_ClubActivityManager$ApplyForActivity$ER);
    } else {
        return this._worker.tars_invoke("ApplyForActivity", __LifeService_ClubActivityManager$ApplyForActivity$IE(wx_id, activityId), arguments[arguments.length - 1], __LifeService_ClubActivityManager$ApplyForActivity$IF).then(__LifeService_ClubActivityManager$ApplyForActivity$ID, __LifeService_ClubActivityManager$ApplyForActivity$ER);
    }
};
LifeService.ClubActivityManagerProxy.ApplyForActivity = __LifeService_ClubActivityManager$ApplyForActivity$IF;

var __LifeService_ClubActivityManager$ApplyForClub$IF = {
    "name" : "ApplyForClub",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "clubId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "RetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$ApplyForClub$IE = function (wx_id, clubId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeString(2, clubId);
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$ApplyForClub$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "RetCode" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$ApplyForClub$PE = function (wx_id, clubId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeString("clubId", clubId);
    return tup;
};

var __LifeService_ClubActivityManager$ApplyForClub$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "RetCode" : tup.readInt32("RetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$ApplyForClub$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::ApplyForClub failed");
};

LifeService.ClubActivityManagerProxy.prototype.ApplyForClub = function (wx_id, clubId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("ApplyForClub", __LifeService_ClubActivityManager$ApplyForClub$PE(wx_id, clubId, version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$ApplyForClub$IF).then(__LifeService_ClubActivityManager$ApplyForClub$PD, __LifeService_ClubActivityManager$ApplyForClub$ER);
    } else {
        return this._worker.tars_invoke("ApplyForClub", __LifeService_ClubActivityManager$ApplyForClub$IE(wx_id, clubId), arguments[arguments.length - 1], __LifeService_ClubActivityManager$ApplyForClub$IF).then(__LifeService_ClubActivityManager$ApplyForClub$ID, __LifeService_ClubActivityManager$ApplyForClub$ER);
    }
};
LifeService.ClubActivityManagerProxy.ApplyForClub = __LifeService_ClubActivityManager$ApplyForClub$IF;

var __LifeService_ClubActivityManager$CreateActivity$IF = {
    "name" : "CreateActivity",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activityInfo",
        "class" : "LifeService.ActivityInfo",
        "direction" : "in"
    }, {
        "name" : "RetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$CreateActivity$IE = function (wx_id, activityInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeStruct(2, activityInfo);
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$CreateActivity$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "RetCode" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$CreateActivity$PE = function (wx_id, activityInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeStruct("activityInfo", activityInfo);
    return tup;
};

var __LifeService_ClubActivityManager$CreateActivity$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "RetCode" : tup.readInt32("RetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$CreateActivity$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::CreateActivity failed");
};

LifeService.ClubActivityManagerProxy.prototype.CreateActivity = function (wx_id, activityInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("CreateActivity", __LifeService_ClubActivityManager$CreateActivity$PE(wx_id, activityInfo, version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$CreateActivity$IF).then(__LifeService_ClubActivityManager$CreateActivity$PD, __LifeService_ClubActivityManager$CreateActivity$ER);
    } else {
        return this._worker.tars_invoke("CreateActivity", __LifeService_ClubActivityManager$CreateActivity$IE(wx_id, activityInfo), arguments[arguments.length - 1], __LifeService_ClubActivityManager$CreateActivity$IF).then(__LifeService_ClubActivityManager$CreateActivity$ID, __LifeService_ClubActivityManager$CreateActivity$ER);
    }
};
LifeService.ClubActivityManagerProxy.CreateActivity = __LifeService_ClubActivityManager$CreateActivity$IF;

var __LifeService_ClubActivityManager$CreateClub$IF = {
    "name" : "CreateClub",
    "return" : "int32",
    "arguments" : [{
        "name" : "clubInfo",
        "class" : "LifeService.ClubInfo",
        "direction" : "in"
    }, {
        "name" : "RetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$CreateClub$IE = function (clubInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, clubInfo);
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$CreateClub$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "RetCode" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$CreateClub$PE = function (clubInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("clubInfo", clubInfo);
    return tup;
};

var __LifeService_ClubActivityManager$CreateClub$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "RetCode" : tup.readInt32("RetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$CreateClub$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::CreateClub failed");
};

LifeService.ClubActivityManagerProxy.prototype.CreateClub = function (clubInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("CreateClub", __LifeService_ClubActivityManager$CreateClub$PE(clubInfo, version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$CreateClub$IF).then(__LifeService_ClubActivityManager$CreateClub$PD, __LifeService_ClubActivityManager$CreateClub$ER);
    } else {
        return this._worker.tars_invoke("CreateClub", __LifeService_ClubActivityManager$CreateClub$IE(clubInfo), arguments[arguments.length - 1], __LifeService_ClubActivityManager$CreateClub$IF).then(__LifeService_ClubActivityManager$CreateClub$ID, __LifeService_ClubActivityManager$CreateClub$ER);
    }
};
LifeService.ClubActivityManagerProxy.CreateClub = __LifeService_ClubActivityManager$CreateClub$IF;

var __LifeService_ClubActivityManager$CreateClubManager$IF = {
    "name" : "CreateClubManager",
    "return" : "int32",
    "arguments" : [{
        "name" : "wxId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "clubId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "RetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$CreateClubManager$IE = function (wxId, clubId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wxId);
    os.writeString(2, clubId);
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$CreateClubManager$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "RetCode" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$CreateClubManager$PE = function (wxId, clubId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wxId", wxId);
    tup.writeString("clubId", clubId);
    return tup;
};

var __LifeService_ClubActivityManager$CreateClubManager$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "RetCode" : tup.readInt32("RetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$CreateClubManager$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::CreateClubManager failed");
};

LifeService.ClubActivityManagerProxy.prototype.CreateClubManager = function (wxId, clubId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("CreateClubManager", __LifeService_ClubActivityManager$CreateClubManager$PE(wxId, clubId, version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$CreateClubManager$IF).then(__LifeService_ClubActivityManager$CreateClubManager$PD, __LifeService_ClubActivityManager$CreateClubManager$ER);
    } else {
        return this._worker.tars_invoke("CreateClubManager", __LifeService_ClubActivityManager$CreateClubManager$IE(wxId, clubId), arguments[arguments.length - 1], __LifeService_ClubActivityManager$CreateClubManager$IF).then(__LifeService_ClubActivityManager$CreateClubManager$ID, __LifeService_ClubActivityManager$CreateClubManager$ER);
    }
};
LifeService.ClubActivityManagerProxy.CreateClubManager = __LifeService_ClubActivityManager$CreateClubManager$IF;

var __LifeService_ClubActivityManager$GetActivityDetail$IF = {
    "name" : "GetActivityDetail",
    "return" : "int32",
    "arguments" : [{
        "name" : "activityId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activityInfo",
        "class" : "LifeService.ActivityInfo",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$GetActivityDetail$IE = function (activityId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, activityId);
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$GetActivityDetail$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "activityInfo" : is.readStruct(2, true, _TARS_MODULE_A_.LifeService.ActivityInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$GetActivityDetail$PE = function (activityId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("activityId", activityId);
    return tup;
};

var __LifeService_ClubActivityManager$GetActivityDetail$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "activityInfo" : tup.readStruct("activityInfo", _TARS_MODULE_A_.LifeService.ActivityInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$GetActivityDetail$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::GetActivityDetail failed");
};

LifeService.ClubActivityManagerProxy.prototype.GetActivityDetail = function (activityId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("GetActivityDetail", __LifeService_ClubActivityManager$GetActivityDetail$PE(activityId, version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$GetActivityDetail$IF).then(__LifeService_ClubActivityManager$GetActivityDetail$PD, __LifeService_ClubActivityManager$GetActivityDetail$ER);
    } else {
        return this._worker.tars_invoke("GetActivityDetail", __LifeService_ClubActivityManager$GetActivityDetail$IE(activityId), arguments[arguments.length - 1], __LifeService_ClubActivityManager$GetActivityDetail$IF).then(__LifeService_ClubActivityManager$GetActivityDetail$ID, __LifeService_ClubActivityManager$GetActivityDetail$ER);
    }
};
LifeService.ClubActivityManagerProxy.GetActivityDetail = __LifeService_ClubActivityManager$GetActivityDetail$IF;

var __LifeService_ClubActivityManager$GetActivityList$IF = {
    "name" : "GetActivityList",
    "return" : "int32",
    "arguments" : [{
        "name" : "index",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "nextIndex",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "activityList",
        "class" : "list(map(string, string))",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$GetActivityList$IE = function (index) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, index);
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$GetActivityList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "nextIndex" : is.readInt32(2, true, 0),
                    "activityList" : is.readList(3, true, TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$GetActivityList$PE = function (index, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("index", index);
    return tup;
};

var __LifeService_ClubActivityManager$GetActivityList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "nextIndex" : tup.readInt32("nextIndex"),
                    "activityList" : tup.readList("activityList", TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$GetActivityList$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::GetActivityList failed");
};

LifeService.ClubActivityManagerProxy.prototype.GetActivityList = function (index) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("GetActivityList", __LifeService_ClubActivityManager$GetActivityList$PE(index, version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$GetActivityList$IF).then(__LifeService_ClubActivityManager$GetActivityList$PD, __LifeService_ClubActivityManager$GetActivityList$ER);
    } else {
        return this._worker.tars_invoke("GetActivityList", __LifeService_ClubActivityManager$GetActivityList$IE(index), arguments[arguments.length - 1], __LifeService_ClubActivityManager$GetActivityList$IF).then(__LifeService_ClubActivityManager$GetActivityList$ID, __LifeService_ClubActivityManager$GetActivityList$ER);
    }
};
LifeService.ClubActivityManagerProxy.GetActivityList = __LifeService_ClubActivityManager$GetActivityList$IF;

var __LifeService_ClubActivityManager$GetClubList$IF = {
    "name" : "GetClubList",
    "return" : "int32",
    "arguments" : [{
        "name" : "clubInfoList",
        "class" : "list(LifeService.ClubInfo)",
        "direction" : "out"
    }, {
        "name" : "RetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_ClubActivityManager$GetClubList$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __LifeService_ClubActivityManager$GetClubList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "clubInfoList" : is.readList(1, true, TarsStream.List(_TARS_MODULE_A_.LifeService.ClubInfo)),
                    "RetCode" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$GetClubList$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __LifeService_ClubActivityManager$GetClubList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "clubInfoList" : tup.readList("clubInfoList", TarsStream.List(_TARS_MODULE_A_.LifeService.ClubInfo)),
                    "RetCode" : tup.readInt32("RetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_ClubActivityManager$GetClubList$ER = function (data) {
    throw _makeError(data, "Call ClubActivityManager::GetClubList failed");
};

LifeService.ClubActivityManagerProxy.prototype.GetClubList = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("GetClubList", __LifeService_ClubActivityManager$GetClubList$PE(version), arguments[arguments.length - 1], __LifeService_ClubActivityManager$GetClubList$IF).then(__LifeService_ClubActivityManager$GetClubList$PD, __LifeService_ClubActivityManager$GetClubList$ER);
    } else {
        return this._worker.tars_invoke("GetClubList", __LifeService_ClubActivityManager$GetClubList$IE(), arguments[arguments.length - 1], __LifeService_ClubActivityManager$GetClubList$IF).then(__LifeService_ClubActivityManager$GetClubList$ID, __LifeService_ClubActivityManager$GetClubList$ER);
    }
};
LifeService.ClubActivityManagerProxy.GetClubList = __LifeService_ClubActivityManager$GetClubList$IF;



