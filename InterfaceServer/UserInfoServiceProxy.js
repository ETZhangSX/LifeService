// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tools(20180620)
// TarsParser Maintained By <WSRD> and tools Maintained By <superzheng>
// Generated from "UserInfoService.tars" by Client Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var LifeService = LifeService || {};
module.exports.LifeService = LifeService;

LifeService.UserInfoServiceProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
};

LifeService.UserInfoServiceProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

LifeService.UserInfoServiceProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};


LifeService.UserInfo = function() {
    this.name = "";
    this.phone = "";
    this.gender = "";
    this.avatar_url = "";
    this.registration_time = "";
    this.group = 0;
    this._classname = "LifeService.UserInfo";
};
LifeService.UserInfo._classname = "LifeService.UserInfo";
LifeService.UserInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.UserInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.UserInfo._readFrom = function (is) {
    var tmp = new LifeService.UserInfo();
    tmp.name = is.readString(0, true, "");
    tmp.phone = is.readString(1, true, "");
    tmp.gender = is.readString(2, true, "");
    tmp.avatar_url = is.readString(3, true, "");
    tmp.registration_time = is.readString(4, true, "");
    tmp.group = is.readInt32(5, true, 0);
    return tmp;
};
LifeService.UserInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.name);
    os.writeString(1, this.phone);
    os.writeString(2, this.gender);
    os.writeString(3, this.avatar_url);
    os.writeString(4, this.registration_time);
    os.writeInt32(5, this.group);
};
LifeService.UserInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.UserInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.UserInfo.prototype.toObject = function() { 
    return {
        "name" : this.name,
        "phone" : this.phone,
        "gender" : this.gender,
        "avatar_url" : this.avatar_url,
        "registration_time" : this.registration_time,
        "group" : this.group
    };
};
LifeService.UserInfo.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("name") && (this.name = json.name);
    json.hasOwnProperty("phone") && (this.phone = json.phone);
    json.hasOwnProperty("gender") && (this.gender = json.gender);
    json.hasOwnProperty("avatar_url") && (this.avatar_url = json.avatar_url);
    json.hasOwnProperty("registration_time") && (this.registration_time = json.registration_time);
    json.hasOwnProperty("group") && (this.group = json.group);
};
LifeService.UserInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.UserInfo.new = function () {
    return new LifeService.UserInfo();
};
LifeService.UserInfo.create = function (is) {
    return LifeService.UserInfo._readFrom(is);
};


var __LifeService_UserInfoService$getGroupList$EN = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __LifeService_UserInfoService$getGroupList$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "groupInfo" : is.readMap(1, true, TarsStream.Map(TarsStream.Int32, TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __LifeService_UserInfoService$getGroupList$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

LifeService.UserInfoServiceProxy.prototype.getGroupList = function () {
    return this._worker.tars_invoke("getGroupList", __LifeService_UserInfoService$getGroupList$EN(), arguments[arguments.length - 1]).then(__LifeService_UserInfoService$getGroupList$DE, __LifeService_UserInfoService$getGroupList$ER);
};

var __LifeService_UserInfoService$getUserPermissionInfo$EN = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_UserInfoService$getUserPermissionInfo$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __LifeService_UserInfoService$getUserPermissionInfo$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

LifeService.UserInfoServiceProxy.prototype.getUserPermissionInfo = function (wx_id) {
    return this._worker.tars_invoke("getUserPermissionInfo", __LifeService_UserInfoService$getUserPermissionInfo$EN(wx_id), arguments[arguments.length - 1]).then(__LifeService_UserInfoService$getUserPermissionInfo$DE, __LifeService_UserInfoService$getUserPermissionInfo$ER);
};

var __LifeService_UserInfoService$signIn$EN = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_UserInfoService$signIn$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sRsp" : is.readStruct(2, true, LifeService.UserInfo)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __LifeService_UserInfoService$signIn$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

LifeService.UserInfoServiceProxy.prototype.signIn = function (wx_id) {
    return this._worker.tars_invoke("signIn", __LifeService_UserInfoService$signIn$EN(wx_id), arguments[arguments.length - 1]).then(__LifeService_UserInfoService$signIn$DE, __LifeService_UserInfoService$signIn$ER);
};

var __LifeService_UserInfoService$signUp$EN = function (wx_id, userInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeStruct(2, userInfo);
    return os.getBinBuffer();
};

var __LifeService_UserInfoService$signUp$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "retCode" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __LifeService_UserInfoService$signUp$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

LifeService.UserInfoServiceProxy.prototype.signUp = function (wx_id, userInfo) {
    return this._worker.tars_invoke("signUp", __LifeService_UserInfoService$signUp$EN(wx_id, userInfo), arguments[arguments.length - 1]).then(__LifeService_UserInfoService$signUp$DE, __LifeService_UserInfoService$signUp$ER);
};



