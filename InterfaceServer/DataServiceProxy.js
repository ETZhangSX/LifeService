// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "DataService.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var LifeService = LifeService || {};
module.exports.LifeService = LifeService;

LifeService.DataServiceProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

LifeService.DataServiceProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

LifeService.DataServiceProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

LifeService.DataServiceProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

LifeService.DataServiceProxy.prototype.getVersion = function () {
    return this._worker.version;
};

LifeService.UserInfo = function() {
    this.name = "";
    this.phone = "";
    this.gender = "";
    this.avatar_url = "";
    this.registration_time = "";
    this.group = 0;
    this._classname = "LifeService.UserInfo";
};
LifeService.UserInfo._classname = "LifeService.UserInfo";
LifeService.UserInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.UserInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.UserInfo._readFrom = function (is) {
    var tmp = new LifeService.UserInfo;
    tmp.name = is.readString(0, true, "");
    tmp.phone = is.readString(1, true, "");
    tmp.gender = is.readString(2, true, "");
    tmp.avatar_url = is.readString(3, true, "");
    tmp.registration_time = is.readString(4, true, "");
    tmp.group = is.readInt32(5, true, 0);
    return tmp;
};
LifeService.UserInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.name);
    os.writeString(1, this.phone);
    os.writeString(2, this.gender);
    os.writeString(3, this.avatar_url);
    os.writeString(4, this.registration_time);
    os.writeInt32(5, this.group);
};
LifeService.UserInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.UserInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.UserInfo.prototype.toObject = function() { 
    return {
        "name" : this.name,
        "phone" : this.phone,
        "gender" : this.gender,
        "avatar_url" : this.avatar_url,
        "registration_time" : this.registration_time,
        "group" : this.group
    };
};
LifeService.UserInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "phone") && (this.phone = json.phone);
    _hasOwnProperty.call(json, "gender") && (this.gender = json.gender);
    _hasOwnProperty.call(json, "avatar_url") && (this.avatar_url = json.avatar_url);
    _hasOwnProperty.call(json, "registration_time") && (this.registration_time = json.registration_time);
    _hasOwnProperty.call(json, "group") && (this.group = json.group);
    return this;
};
LifeService.UserInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.UserInfo.new = function () {
    return new LifeService.UserInfo();
};
LifeService.UserInfo.create = function (is) {
    return LifeService.UserInfo._readFrom(is);
};

LifeService.Column = function() {
    this.columnName = "";
    this.DBInt = true;
    this.columnValue = "";
    this._classname = "LifeService.Column";
};
LifeService.Column._classname = "LifeService.Column";
LifeService.Column._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.Column._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.Column._readFrom = function (is) {
    var tmp = new LifeService.Column;
    tmp.columnName = is.readString(0, true, "");
    tmp.DBInt = is.readBoolean(1, true, true);
    tmp.columnValue = is.readString(2, true, "");
    return tmp;
};
LifeService.Column.prototype._writeTo = function (os) {
    os.writeString(0, this.columnName);
    os.writeBoolean(1, this.DBInt);
    os.writeString(2, this.columnValue);
};
LifeService.Column.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.Column.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.Column.prototype.toObject = function() { 
    return {
        "columnName" : this.columnName,
        "DBInt" : this.DBInt,
        "columnValue" : this.columnValue
    };
};
LifeService.Column.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "columnName") && (this.columnName = json.columnName);
    _hasOwnProperty.call(json, "DBInt") && (this.DBInt = json.DBInt);
    _hasOwnProperty.call(json, "columnValue") && (this.columnValue = json.columnValue);
    return this;
};
LifeService.Column.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.Column.new = function () {
    return new LifeService.Column();
};
LifeService.Column.create = function (is) {
    return LifeService.Column._readFrom(is);
};

LifeService.ClubInfo = function() {
    this.clubId = "";
    this.name = "";
    this.chairman = "";
    this.createTime = "";
    this.introduction = "";
    this._classname = "LifeService.ClubInfo";
};
LifeService.ClubInfo._classname = "LifeService.ClubInfo";
LifeService.ClubInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.ClubInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.ClubInfo._readFrom = function (is) {
    var tmp = new LifeService.ClubInfo;
    tmp.clubId = is.readString(0, true, "");
    tmp.name = is.readString(1, true, "");
    tmp.chairman = is.readString(2, true, "");
    tmp.createTime = is.readString(3, true, "");
    tmp.introduction = is.readString(4, true, "");
    return tmp;
};
LifeService.ClubInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.clubId);
    os.writeString(1, this.name);
    os.writeString(2, this.chairman);
    os.writeString(3, this.createTime);
    os.writeString(4, this.introduction);
};
LifeService.ClubInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.ClubInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.ClubInfo.prototype.toObject = function() { 
    return {
        "clubId" : this.clubId,
        "name" : this.name,
        "chairman" : this.chairman,
        "createTime" : this.createTime,
        "introduction" : this.introduction
    };
};
LifeService.ClubInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "clubId") && (this.clubId = json.clubId);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "chairman") && (this.chairman = json.chairman);
    _hasOwnProperty.call(json, "createTime") && (this.createTime = json.createTime);
    _hasOwnProperty.call(json, "introduction") && (this.introduction = json.introduction);
    return this;
};
LifeService.ClubInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.ClubInfo.new = function () {
    return new LifeService.ClubInfo();
};
LifeService.ClubInfo.create = function (is) {
    return LifeService.ClubInfo._readFrom(is);
};

LifeService.ActivityInfo = function() {
    this.activityId = "";
    this.sponsor = "";
    this.clubId = "";
    this.targetId = "";
    this.createTime = "";
    this.startTime = "";
    this.stopTime = "";
    this.registryStartTime = "";
    this.registryStopTime = "";
    this.content = "";
    this._classname = "LifeService.ActivityInfo";
};
LifeService.ActivityInfo._classname = "LifeService.ActivityInfo";
LifeService.ActivityInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
LifeService.ActivityInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LifeService.ActivityInfo._readFrom = function (is) {
    var tmp = new LifeService.ActivityInfo;
    tmp.activityId = is.readString(0, true, "");
    tmp.sponsor = is.readString(1, true, "");
    tmp.clubId = is.readString(2, true, "");
    tmp.targetId = is.readString(3, true, "");
    tmp.createTime = is.readString(4, false, "");
    tmp.startTime = is.readString(5, false, "");
    tmp.stopTime = is.readString(6, false, "");
    tmp.registryStartTime = is.readString(7, false, "");
    tmp.registryStopTime = is.readString(8, false, "");
    tmp.content = is.readString(9, false, "");
    return tmp;
};
LifeService.ActivityInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.activityId);
    os.writeString(1, this.sponsor);
    os.writeString(2, this.clubId);
    os.writeString(3, this.targetId);
    os.writeString(4, this.createTime);
    os.writeString(5, this.startTime);
    os.writeString(6, this.stopTime);
    os.writeString(7, this.registryStartTime);
    os.writeString(8, this.registryStopTime);
    os.writeString(9, this.content);
};
LifeService.ActivityInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LifeService.ActivityInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LifeService.ActivityInfo.prototype.toObject = function() { 
    return {
        "activityId" : this.activityId,
        "sponsor" : this.sponsor,
        "clubId" : this.clubId,
        "targetId" : this.targetId,
        "createTime" : this.createTime,
        "startTime" : this.startTime,
        "stopTime" : this.stopTime,
        "registryStartTime" : this.registryStartTime,
        "registryStopTime" : this.registryStopTime,
        "content" : this.content
    };
};
LifeService.ActivityInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "activityId") && (this.activityId = json.activityId);
    _hasOwnProperty.call(json, "sponsor") && (this.sponsor = json.sponsor);
    _hasOwnProperty.call(json, "clubId") && (this.clubId = json.clubId);
    _hasOwnProperty.call(json, "targetId") && (this.targetId = json.targetId);
    _hasOwnProperty.call(json, "createTime") && (this.createTime = json.createTime);
    _hasOwnProperty.call(json, "startTime") && (this.startTime = json.startTime);
    _hasOwnProperty.call(json, "stopTime") && (this.stopTime = json.stopTime);
    _hasOwnProperty.call(json, "registryStartTime") && (this.registryStartTime = json.registryStartTime);
    _hasOwnProperty.call(json, "registryStopTime") && (this.registryStopTime = json.registryStopTime);
    _hasOwnProperty.call(json, "content") && (this.content = json.content);
    return this;
};
LifeService.ActivityInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LifeService.ActivityInfo.new = function () {
    return new LifeService.ActivityInfo();
};
LifeService.ActivityInfo.create = function (is) {
    return LifeService.ActivityInfo._readFrom(is);
};

var __LifeService_DataService$createClub$IF = {
    "name" : "createClub",
    "return" : "int32",
    "arguments" : [{
        "name" : "clubInfo",
        "class" : "LifeService.ClubInfo",
        "direction" : "in"
    }, {
        "name" : "iRetCode",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __LifeService_DataService$createClub$IE = function (clubInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, clubInfo);
    return os.getBinBuffer();
};

var __LifeService_DataService$createClub$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "iRetCode" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createClub$PE = function (clubInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("clubInfo", clubInfo);
    return tup;
};

var __LifeService_DataService$createClub$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "iRetCode" : tup.readInt32("iRetCode")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createClub$ER = function (data) {
    throw _makeError(data, "Call DataService::createClub failed");
};

LifeService.DataServiceProxy.prototype.createClub = function (clubInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createClub", __LifeService_DataService$createClub$PE(clubInfo, version), arguments[arguments.length - 1], __LifeService_DataService$createClub$IF).then(__LifeService_DataService$createClub$PD, __LifeService_DataService$createClub$ER);
    } else {
        return this._worker.tars_invoke("createClub", __LifeService_DataService$createClub$IE(clubInfo), arguments[arguments.length - 1], __LifeService_DataService$createClub$IF).then(__LifeService_DataService$createClub$ID, __LifeService_DataService$createClub$ER);
    }
};
LifeService.DataServiceProxy.createClub = __LifeService_DataService$createClub$IF;

var __LifeService_DataService$createUser$IF = {
    "name" : "createUser",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "UserInfo",
        "class" : "LifeService.UserInfo",
        "direction" : "in"
    }]
};

var __LifeService_DataService$createUser$IE = function (wx_id, UserInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    os.writeStruct(2, UserInfo);
    return os.getBinBuffer();
};

var __LifeService_DataService$createUser$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createUser$PE = function (wx_id, UserInfo, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    tup.writeStruct("UserInfo", UserInfo);
    return tup;
};

var __LifeService_DataService$createUser$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$createUser$ER = function (data) {
    throw _makeError(data, "Call DataService::createUser failed");
};

LifeService.DataServiceProxy.prototype.createUser = function (wx_id, UserInfo) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createUser", __LifeService_DataService$createUser$PE(wx_id, UserInfo, version), arguments[arguments.length - 1], __LifeService_DataService$createUser$IF).then(__LifeService_DataService$createUser$PD, __LifeService_DataService$createUser$ER);
    } else {
        return this._worker.tars_invoke("createUser", __LifeService_DataService$createUser$IE(wx_id, UserInfo), arguments[arguments.length - 1], __LifeService_DataService$createUser$IF).then(__LifeService_DataService$createUser$ID, __LifeService_DataService$createUser$ER);
    }
};
LifeService.DataServiceProxy.createUser = __LifeService_DataService$createUser$IF;

var __LifeService_DataService$getClubList$IF = {
    "name" : "getClubList",
    "return" : "int32",
    "arguments" : [{
        "name" : "clubInfoList",
        "class" : "list(LifeService.ClubInfo)",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getClubList$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __LifeService_DataService$getClubList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "clubInfoList" : is.readList(1, true, TarsStream.List(LifeService.ClubInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getClubList$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __LifeService_DataService$getClubList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "clubInfoList" : tup.readList("clubInfoList", TarsStream.List(LifeService.ClubInfo))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getClubList$ER = function (data) {
    throw _makeError(data, "Call DataService::getClubList failed");
};

LifeService.DataServiceProxy.prototype.getClubList = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getClubList", __LifeService_DataService$getClubList$PE(version), arguments[arguments.length - 1], __LifeService_DataService$getClubList$IF).then(__LifeService_DataService$getClubList$PD, __LifeService_DataService$getClubList$ER);
    } else {
        return this._worker.tars_invoke("getClubList", __LifeService_DataService$getClubList$IE(), arguments[arguments.length - 1], __LifeService_DataService$getClubList$IF).then(__LifeService_DataService$getClubList$ID, __LifeService_DataService$getClubList$ER);
    }
};
LifeService.DataServiceProxy.getClubList = __LifeService_DataService$getClubList$IF;

var __LifeService_DataService$getGroupByGroupId$IF = {
    "name" : "getGroupByGroupId",
    "return" : "int32",
    "arguments" : [{
        "name" : "groupId",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "group",
        "class" : "string",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getGroupByGroupId$IE = function (groupId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, groupId);
    return os.getBinBuffer();
};

var __LifeService_DataService$getGroupByGroupId$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "group" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByGroupId$PE = function (groupId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("groupId", groupId);
    return tup;
};

var __LifeService_DataService$getGroupByGroupId$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "group" : tup.readString("group")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByGroupId$ER = function (data) {
    throw _makeError(data, "Call DataService::getGroupByGroupId failed");
};

LifeService.DataServiceProxy.prototype.getGroupByGroupId = function (groupId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGroupByGroupId", __LifeService_DataService$getGroupByGroupId$PE(groupId, version), arguments[arguments.length - 1], __LifeService_DataService$getGroupByGroupId$IF).then(__LifeService_DataService$getGroupByGroupId$PD, __LifeService_DataService$getGroupByGroupId$ER);
    } else {
        return this._worker.tars_invoke("getGroupByGroupId", __LifeService_DataService$getGroupByGroupId$IE(groupId), arguments[arguments.length - 1], __LifeService_DataService$getGroupByGroupId$IF).then(__LifeService_DataService$getGroupByGroupId$ID, __LifeService_DataService$getGroupByGroupId$ER);
    }
};
LifeService.DataServiceProxy.getGroupByGroupId = __LifeService_DataService$getGroupByGroupId$IF;

var __LifeService_DataService$getGroupByUserId$IF = {
    "name" : "getGroupByUserId",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "group",
        "class" : "string",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getGroupByUserId$IE = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getGroupByUserId$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "group" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByUserId$PE = function (wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$getGroupByUserId$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "group" : tup.readString("group")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupByUserId$ER = function (data) {
    throw _makeError(data, "Call DataService::getGroupByUserId failed");
};

LifeService.DataServiceProxy.prototype.getGroupByUserId = function (wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGroupByUserId", __LifeService_DataService$getGroupByUserId$PE(wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$getGroupByUserId$IF).then(__LifeService_DataService$getGroupByUserId$PD, __LifeService_DataService$getGroupByUserId$ER);
    } else {
        return this._worker.tars_invoke("getGroupByUserId", __LifeService_DataService$getGroupByUserId$IE(wx_id), arguments[arguments.length - 1], __LifeService_DataService$getGroupByUserId$IF).then(__LifeService_DataService$getGroupByUserId$ID, __LifeService_DataService$getGroupByUserId$ER);
    }
};
LifeService.DataServiceProxy.getGroupByUserId = __LifeService_DataService$getGroupByUserId$IF;

var __LifeService_DataService$getGroupInfo$IF = {
    "name" : "getGroupInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "groupInfo",
        "class" : "map(int32, string)",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getGroupInfo$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __LifeService_DataService$getGroupInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "groupInfo" : is.readMap(1, true, TarsStream.Map(TarsStream.Int32, TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupInfo$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __LifeService_DataService$getGroupInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "groupInfo" : tup.readMap("groupInfo", TarsStream.Map(TarsStream.Int32, TarsStream.String))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getGroupInfo$ER = function (data) {
    throw _makeError(data, "Call DataService::getGroupInfo failed");
};

LifeService.DataServiceProxy.prototype.getGroupInfo = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getGroupInfo", __LifeService_DataService$getGroupInfo$PE(version), arguments[arguments.length - 1], __LifeService_DataService$getGroupInfo$IF).then(__LifeService_DataService$getGroupInfo$PD, __LifeService_DataService$getGroupInfo$ER);
    } else {
        return this._worker.tars_invoke("getGroupInfo", __LifeService_DataService$getGroupInfo$IE(), arguments[arguments.length - 1], __LifeService_DataService$getGroupInfo$IF).then(__LifeService_DataService$getGroupInfo$ID, __LifeService_DataService$getGroupInfo$ER);
    }
};
LifeService.DataServiceProxy.getGroupInfo = __LifeService_DataService$getGroupInfo$IF;

var __LifeService_DataService$getUserInfo$IF = {
    "name" : "getUserInfo",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sRsp",
        "class" : "LifeService.UserInfo",
        "direction" : "out"
    }]
};

var __LifeService_DataService$getUserInfo$IE = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$getUserInfo$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sRsp" : is.readStruct(2, true, LifeService.UserInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getUserInfo$PE = function (wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$getUserInfo$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "sRsp" : tup.readStruct("sRsp", LifeService.UserInfo)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$getUserInfo$ER = function (data) {
    throw _makeError(data, "Call DataService::getUserInfo failed");
};

LifeService.DataServiceProxy.prototype.getUserInfo = function (wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getUserInfo", __LifeService_DataService$getUserInfo$PE(wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$getUserInfo$IF).then(__LifeService_DataService$getUserInfo$PD, __LifeService_DataService$getUserInfo$ER);
    } else {
        return this._worker.tars_invoke("getUserInfo", __LifeService_DataService$getUserInfo$IE(wx_id), arguments[arguments.length - 1], __LifeService_DataService$getUserInfo$IF).then(__LifeService_DataService$getUserInfo$ID, __LifeService_DataService$getUserInfo$ER);
    }
};
LifeService.DataServiceProxy.getUserInfo = __LifeService_DataService$getUserInfo$IF;

var __LifeService_DataService$hasUser$IF = {
    "name" : "hasUser",
    "return" : "int32",
    "arguments" : [{
        "name" : "wx_id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sRsp",
        "class" : "bool",
        "direction" : "out"
    }]
};

var __LifeService_DataService$hasUser$IE = function (wx_id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, wx_id);
    return os.getBinBuffer();
};

var __LifeService_DataService$hasUser$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sRsp" : is.readBoolean(2, true, true)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$hasUser$PE = function (wx_id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("wx_id", wx_id);
    return tup;
};

var __LifeService_DataService$hasUser$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "sRsp" : tup.readBoolean("sRsp")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$hasUser$ER = function (data) {
    throw _makeError(data, "Call DataService::hasUser failed");
};

LifeService.DataServiceProxy.prototype.hasUser = function (wx_id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("hasUser", __LifeService_DataService$hasUser$PE(wx_id, version), arguments[arguments.length - 1], __LifeService_DataService$hasUser$IF).then(__LifeService_DataService$hasUser$PD, __LifeService_DataService$hasUser$ER);
    } else {
        return this._worker.tars_invoke("hasUser", __LifeService_DataService$hasUser$IE(wx_id), arguments[arguments.length - 1], __LifeService_DataService$hasUser$IF).then(__LifeService_DataService$hasUser$ID, __LifeService_DataService$hasUser$ER);
    }
};
LifeService.DataServiceProxy.hasUser = __LifeService_DataService$hasUser$IF;

var __LifeService_DataService$insertData$IF = {
    "name" : "insertData",
    "return" : "int32",
    "arguments" : [{
        "name" : "sTableName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sColumns",
        "class" : "list(LifeService.Column)",
        "direction" : "in"
    }]
};

var __LifeService_DataService$insertData$IE = function (sTableName, sColumns) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, sTableName);
    os.writeList(2, sColumns);
    return os.getBinBuffer();
};

var __LifeService_DataService$insertData$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$insertData$PE = function (sTableName, sColumns, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("sTableName", sTableName);
    tup.writeList("sColumns", sColumns);
    return tup;
};

var __LifeService_DataService$insertData$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$insertData$ER = function (data) {
    throw _makeError(data, "Call DataService::insertData failed");
};

LifeService.DataServiceProxy.prototype.insertData = function (sTableName, sColumns) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("insertData", __LifeService_DataService$insertData$PE(sTableName, sColumns, version), arguments[arguments.length - 1], __LifeService_DataService$insertData$IF).then(__LifeService_DataService$insertData$PD, __LifeService_DataService$insertData$ER);
    } else {
        return this._worker.tars_invoke("insertData", __LifeService_DataService$insertData$IE(sTableName, sColumns), arguments[arguments.length - 1], __LifeService_DataService$insertData$IF).then(__LifeService_DataService$insertData$ID, __LifeService_DataService$insertData$ER);
    }
};
LifeService.DataServiceProxy.insertData = __LifeService_DataService$insertData$IF;

var __LifeService_DataService$queryData$IF = {
    "name" : "queryData",
    "return" : "int32",
    "arguments" : [{
        "name" : "sTableName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sColumns",
        "class" : "list(string)",
        "direction" : "in"
    }, {
        "name" : "sCondition",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sRsp",
        "class" : "list(map(string, string))",
        "direction" : "out"
    }]
};

var __LifeService_DataService$queryData$IE = function (sTableName, sColumns, sCondition) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, sTableName);
    os.writeList(2, sColumns);
    os.writeString(3, sCondition);
    return os.getBinBuffer();
};

var __LifeService_DataService$queryData$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sRsp" : is.readList(4, true, TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$queryData$PE = function (sTableName, sColumns, sCondition, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("sTableName", sTableName);
    tup.writeList("sColumns", sColumns);
    tup.writeString("sCondition", sCondition);
    return tup;
};

var __LifeService_DataService$queryData$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "sRsp" : tup.readList("sRsp", TarsStream.List(TarsStream.Map(TarsStream.String, TarsStream.String)))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __LifeService_DataService$queryData$ER = function (data) {
    throw _makeError(data, "Call DataService::queryData failed");
};

LifeService.DataServiceProxy.prototype.queryData = function (sTableName, sColumns, sCondition) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryData", __LifeService_DataService$queryData$PE(sTableName, sColumns, sCondition, version), arguments[arguments.length - 1], __LifeService_DataService$queryData$IF).then(__LifeService_DataService$queryData$PD, __LifeService_DataService$queryData$ER);
    } else {
        return this._worker.tars_invoke("queryData", __LifeService_DataService$queryData$IE(sTableName, sColumns, sCondition), arguments[arguments.length - 1], __LifeService_DataService$queryData$IF).then(__LifeService_DataService$queryData$ID, __LifeService_DataService$queryData$ER);
    }
};
LifeService.DataServiceProxy.queryData = __LifeService_DataService$queryData$IF;



